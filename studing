#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<string.h>//strlen

//int Add(int x, int y)
//{
//	int z = x + y;
//	return z;
//}
//int main()
//{
//	int c;
//	int a = 10;
//	int b = 20;
//	    c=Add(a, b);
//		printf("等于%d", c);
//	return 0;
//
//}


//int main()
//{
//	char arr1[] = "bit";
//	char arr2[] = "zhang";
//	strcpy(arr2, arr1);//返回值是地址 要保证源头数据小于目的地数据，或者目的地有更大的空间
//	//\0字符串结束的标志，遇到\0就是字符串的结束
//	printf("%s\n", arr2);
//	//strcpy-string copy-字符串拷贝,会把\0也拷贝到
//	//strlen-string length-计算字符串长度
//	//
//	return 0;
//}

  

//memset
//memory-内存 set-设置
//int main()
//{
//	char arr[] = "zhzhzh hzhzh";
//		memset(arr, '6', 5);//把6替换到arr的前5个字符
//	printf("%s\n",arr);//*****h hzhzh
//
//	return 0;
//}
//int Max(int x, int y)
//{
//	if (x> y)
//		return x;
//	else
//		return y;
//}
//int main()
//{
//	int a = 10;
//	int b = 20;
//	 int c=Max(a, b);
//	 c = Max(1121, 2233);
//	 printf("%d", c);
//	 	 return 0;
//}
//函数无返回值void
// void swap1(int *x, int *y)//解引用：解开引用的指针指向的数据
//	{
//		int c = 0;
//		c = *x;
//		*x = *y;
//		*y = c;
//	  }
// void swap2(int x, int y)//实参传递给形参时，形参是实参的一部分
//	 //形参是实参的一份临时拷贝，改变形参的值不会影响实参的值
// {
//	 int c = 0;
//	 c = x;
//	 x = y;
//	 y = c;
// }
//int main()
//{
//	int a = 99;
//	int b = 66;
//	//调用swap2函数
//	swap2(a, b);//传值调用
//	//调用swap1函数
//	swap1(&a, &b);//取a，b地址    传址调用
//	printf("%d %d\n",a,b);
//
//	return 0;
//}



//求一个数是否为素数

//#include<stdio.h>
// void sushu(int x)
//{
//	int i = 0;
//	for (i = 2; i <=x; i++)
//	{
//		if (x % i == 0)
//			break;
//	}
//	if (x == i)
//		printf("%d是素数", x);
//	else
//		printf("%d不是素数", x);
//	
//}

//#include<math.h>
//int prime(int n)
//{
//	int i = 0;
//	for ( i = 2; i <=sqrt(n); i++)
//	{
//		if (n % i == 0)
//			return 0;
//	}
//		return 1;
//	
//}
//int main()
//{
//	int a,c;
//	printf("请输入数字:>");
//	scanf("%d",&a);
//	//sushu(a);
//	c=prime(a);
//	if(c==1)
//		printf("%d是素数", a);
//		if(c==0)
//			printf("%d不是素数",a);
//	return 0;
//}




//二分查找
//在一个有序数组查找具体的某个数

int search(int arr[], int x,int r)
{
	int m = r - 1;
	int n = 0;
	int g = 0;
		
	while (n<=m)
	{
		g = (m + n) / 2;
		if (x > arr[g])
			n = g + 1;
		else if (x < arr[g])
			m = g - 1;
		else
			return g;
	}
	
}

int main()
{
	int  arr[] = { 1,2,3,4,5,6,7,8,9 };
	int k = 7;
	int h = 0;
	int m = 0;
	m =sizeof(arr)/sizeof(arr[0]);
	h=search(arr,k,m);
	printf("%d",h);
	return 0;
}
