#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<stdlib.h>
#include<time.h>
#define row 3
#define col 3
//声明initboard
void initboard(char board[row][col],int ROW,int COL);
void Displayboard(char board[row][col], int ROW, int COL);
void player(char board[row][col], int ROW, int COL);
void Computer(char board[row][col], int ROW, int COL);

//win函数需要返回四种状态
//玩家胜利*，电脑胜利#，继续游戏C，平局D
char win(char board[row][col], int ROW, int COL);
void initboard(char board[row][col], int ROW, int COL)
{
	int i = 0;
	int j = 0;
	for (i = 0; i < ROW; i++)
	{
		for (j = 0; j < COL; j++)
		{
			board[i][j] = ' ';
		}
	}
}
void Displayboard(char board[row][col], int ROW, int COL)
{
	int i = 0;
	int j = 0;
	for (i = 0; i < COL; i++)
	{
		for (j = 0; j < ROW; j++)
		{
			printf(" %c ", board[i][j]);
			if (j < ROW - 1)
			{
				printf("|");
			}
		}
		printf("\n");
		if (i < COL - 1)
		{
			for (j = 0; j < ROW; j++)
			{
				printf("---");
				if (j < ROW - 1)
				{
					printf("|");
				}
			}
			printf("\n");
		}
	}

}
void player(char board[row][col], int ROW, int COL)
{
	int x = 0;
	int y = 0;
	printf("请玩家行动>\n");
	printf("棋盘大小3*3\n");
	while (1)
	{
		printf("请输入坐标：");
		scanf("%d%d",&x,&y);
	
		//判断xy坐标合法性
			if (x >= 1 && x <= ROW && y >= 1 && y <= COL)
			{
				if (board[x - 1][y - 1] == ' ')
				{
					board[x - 1][y - 1] = '*';
					break;
				}
				else
				{
					printf("此处已被占据\n");
				}
			}
			else
			{
				printf("输入坐标错误超出棋盘范围，请重新输入\n");
			}
     }
		
}
void Computer(char board[row][col], int ROW, int COL)
{
	int x = 0;
	int y = 0;
	printf("电脑行动\n");
	while (1)
	{
		x = rand() % ROW;
		y = rand() % COL;
		if (board[x][y] == ' ')
		{
			board[x][y] = '#';
			break;
		}
	}
}
//给与win函数返回值
//返回0表示棋盘已满
//返回1表示棋盘未满
int full(char board[row][col], int ROW, int COL)
{
	int i = 0;
	int j = 0;
	for (i = 0; i < ROW; i++)
	{
		for (j = 0; j < COL;j++)
		{
			if (board[i][j] == ' ')
			{
				return 0;
             }
		}
	}
	return 1;
}

char win(char board[row][col], int ROW, int COL)
{
	int i = 0;
	//横三列
	for (i = 0; i <ROW; i++ )
	{
		if(board[i][0]==board[i][1]&& board[i][1] == board[i][2]&& board[i][0] != ' ')
		{
			return board[i][1];
		}
	}
	//竖三列
	for (i = 0; i < COL; i++)
	{
		if (board[0][i] == board[1][i] && board[1][i] == board[2][i] && board[1][i] != ' ')
		{
			return  board[0][i];
		}
	}
	//两个对角线
	if (board[0][0] == board[1][1] && board[1][1] == board[2][2] && board[1][1] != ' ')
	{
		return  board[1][1];
	}
	if (board[0][2] == board[1][1] && board[1][1] == board[2][0] && board[1][1] != ' ')
	{
		return  board[1][1];
	}
	//判断是否平局
	if (1 == full(board, row, col))
	{
		return 'D';
	}
	return 'C';
}
//测试三子游戏
void menu()
{
	printf("*********************\n");
	printf("***1.play   0.exit***\n");
	printf("*********************\n");

}
//游戏的算法实现
void game()
{
	char ret;//判断胜利接受字符
	//数组:存放走出的棋盘信息
	char board[row][col] = { 0 };
	//初始化信息
	initboard(board, row, col);
	//打印棋盘
	Displayboard(board, row, col);
	//下棋
	while (1)
	{
		//玩家下棋
		player(board, row, col);
		Displayboard(board, row, col);
		//判断玩家是否胜利
		ret = win(board, row, col);
		if (ret != 'C')
		{
			break;
		}
		//电脑下棋
		Computer(board, row, col);
		Displayboard(board, row, col);
		//判断电脑是否胜利
		ret = win(board,row,col);
		if (ret != 'C')
		{
			break;
		}

	}
	if (ret == '*')
	{                                                                                                                                                                                                                                                                                                                                                         
		printf("玩家胜利\n");
	}
	else if (ret == '#')
	{
		printf("电脑胜利\n");
	}
	else
	{
		printf("平局\n");
	}
}
void test()
{
	int input=0;
	srand((unsigned int)time(NULL));
	do
	{
		menu();
		printf("请选择；");
		scanf("%d", &input);
		switch (input)
		{
		case 1:
			printf("三子棋开始\n");
			game();
			break;
		case 0:
			printf("游戏退出\n");
			break;
		default:
			printf("输入错误,请重新输入\n");
			break;
		}
	} while (input);
}
int main()
{
	
	test();
	return 0;
}
